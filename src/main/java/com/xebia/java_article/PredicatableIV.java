package com.xebia.java_article;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;

import static javax.crypto.Cipher.ENCRYPT_MODE;

public class PredicatableIV {

    private static byte[] secretKey = {109, 121, 95, 115, 117, 112, 101, 114, 95, 115, 101, 99, 95, 107, 101, 121};

    /**
     * Below you will see two tests, 1 where we do not have to deal with padding, the other one is where we
     * have a short message like "yes" so we need to change the IV in the correct place otherwise we end up
     * changing the padding.
     */
    public static void main(String[] args) throws Exception {
        test16();
        testYesNo();
    }

    public static void test16() throws Exception {
        System.out.println("'s-Hertogenbosch".getBytes().length);
        byte[] ivAlice = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
        byte[] cipherTextAlice = encrypt("'s-Hertogenbosch".getBytes(), secretKey, ivAlice);

        //Eve for example can start guessing the value can be a constant, remember Eve could be using the application as a normal user as well
        byte[] ivEve = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2};
        byte[] plainTextEve = xor(xor(ivEve, ivAlice), "'s-Hertogenbosch".getBytes());
        byte[] cipherTextEve = encrypt(plainTextEve, secretKey, ivEve);

        System.out.println(Base64.getEncoder().encodeToString(cipherTextAlice));
        System.out.println(Base64.getEncoder().encodeToString(cipherTextEve));
    }

    public static void testYesNo() throws Exception {
        byte[] ivAlice = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
        byte[] cipherTextAlice = encrypt("yes".getBytes(), secretKey, ivAlice);

        //Eve for example can start guessing the value can be a constant, remember Eve could be using the application as a normal user as well
        byte[] ivEve = {1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
        byte[] plainTextEve = xor(xor(ivEve, ivAlice), "yes".getBytes());
        byte[] cipherTextEve = encrypt(plainTextEve, secretKey, ivEve);

        System.out.println(Base64.getEncoder().encodeToString(cipherTextAlice));
        System.out.println(Base64.getEncoder().encodeToString(cipherTextEve));
    }

    /**
     * Encrypt, this is the part which would normally happen in the application, the parameter guessedIv will of
     * course not be supplied by Eve but would be generated by the application.
     */
    private static byte[] encrypt(byte[] plaintext, byte[] key, byte[] guessedIv) throws Exception {
        IvParameterSpec ivspec = new IvParameterSpec(guessedIv);
        SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");

        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        cipher.init(ENCRYPT_MODE, secretKeySpec, ivspec);
        return cipher.doFinal(plaintext);
    }

    private static byte[] xor(byte[] a, byte[] b) {
        byte[] result = new byte[Math.min(a.length, b.length)];

        for (int i = 0; i < result.length; i++) {
            result[i] = (byte) (a[i] ^ b[i]);
        }

        return result;
    }
}

